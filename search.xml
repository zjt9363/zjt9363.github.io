<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>用hexo创建属于自己的博客</title>
      <link href="/posts/44f79f02/"/>
      <url>/posts/44f79f02/</url>
      
        <content type="html"><![CDATA[<p>一时搭博一时爽，一直搭博一直爽。<br>花了三天时间简单搭了一个博客，中间踩了好多坑，自闭了N多次。<br>推荐几个比较好的教程以及简单说说自己踩过的一些坑。<br><a id="more"></a><br>每次问小姐姐问题，丢给我一个博客。</p><blockquote><p>-你校人均写博客🐴<br>-对呀</p></blockquote><p>自己也写一个玩玩<br>搭博客就跟装系统一样，第一遍什么都不懂，一点一点摸索，如果搭崩溃了，就全部删了，重新来，第二遍一定会好很多，还蹦就第三遍，每一遍都可以积累经验。（我搭了四次，差点挺不过来了。。。。）</p><h1 id="一、搭建博客"><a href="#一、搭建博客" class="headerlink" title="一、搭建博客"></a>一、搭建博客</h1><p><a href="https://blog.csdn.net/dazhaoDai/article/details/73730069" target="_blank" rel="noopener">https://blog.csdn.net/dazhaoDai/article/details/73730069</a></p><p>这是大佬写的教程，非常通俗易懂，我们就根据这个搭博客。但是其中也有一些坑，以下是一些修正。</p><h2 id="以下图片均出自大佬的博客"><a href="#以下图片均出自大佬的博客" class="headerlink" title="以下图片均出自大佬的博客"></a>以下图片均出自大佬的博客</h2><p><img src="http://bmob-cdn-24906.b0.upaiyun.com/2019/04/15/eedc32f1401dc78080e327f9bd5730ca.png" alt><br><strong>注意仓库名称一定要和自己的github用户名保持一致，智障舍友重搭三次留下的教训。。。</strong></p><p><img src="http://bmob-cdn-24906.b0.upaiyun.com/2019/04/14/00046c984083fbf7805b67dfa30962b6.png" alt><br><strong>GitHub Pages 必须要先新建主题才会出现</strong><br>如果你是使用自己的域名的话，把你的git仓库里的”CNAME”文件下载下来，在里面写入你的博客地址，后面有用。</p><p><br></p><hr><p><br></p><p><strong>接下来要用Git写命令行操作，一定要记得，git bash里面的所有信息一定要认真读完，所有的fatal或者error提示，复制下来，到百度里面查一下解决方案再进行下一步，不然必死，warning不用管。</strong></p><p><img src="http://bmob-cdn-24906.b0.upaiyun.com/2019/04/14/b490cf4040489fe88091b7cd61ee34d2.png" alt></p><p>不要克隆仓库（git clone那一步不要做）。如果克隆了以后，在hexo的时候会报错，提示需要一个空的文件。（克隆仓库那一步本来也就没啥用，都会被覆盖掉）<br>hexo init 的时候，因为墙的问题，下载很慢甚至不会动了。网上有很多教程解决这个问题，大多是更换淘宝源。（个人不推荐，尝试失败了以后差点调不回来）慢慢等就好了。</p><p>创建好以后，把前面下载好的CNAME文件丢到source文件里面去。</p><p>编辑_config.yml文件的时候，语法不能出错，类似冒号后面不能加空格这样的。</p><hr><p><img src="http://bmob-cdn-24906.b0.upaiyun.com/2019/04/14/de1e125c401cb3e1802941cc95291eb5.png" alt><br>在执行这三句命令之前，先用git bash输入以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure></p><p>hexo clean: 清除本地 public 文件里的内容<br>hexo generate：编译到 本地 public 文件夹<br>hexo deploy: 部署到github<br>至此，博客搭建就完成了！<br>每次上传结束，博客可能会出现大面积混乱（一般不会），不要着急，部署到git上以后会有不到20分钟的延迟，请耐心等待。</p><h1 id="二、主题"><a href="#二、主题" class="headerlink" title="二、主题"></a>二、主题</h1><p>很多人推荐next主题，它的插件比较多，可以随自己调，其他的好看的主题就不需要调整什么了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo-theme：https://hexo.io/themes/</span><br><span class="line">hexo-github-theme-list：https://github.com/hexojs/hexo/wiki/Themes</span><br><span class="line">有那些好看的hexo主题？：http://www.zhihu.com/question/24422335</span><br><span class="line">我这里选择的 yelee：GitHub链接 https://github.com/MOxFIVE/hexo-theme-yelee</span><br><span class="line">Yelee主题使用说明: http://moxfive.coding.me/yelee/</span><br></pre></td></tr></table></figure></p><p>关于主题的更多高级配置：<br><a href="https://code.skyheng.com/post/53342.html" target="_blank" rel="noopener">https://code.skyheng.com/post/53342.html</a></p><h1 id="三、写博客"><a href="#三、写博客" class="headerlink" title="三、写博客"></a>三、写博客</h1><p>这里只讲解初级知识，能帮助你让你的博客界面正常显示。<br>首先你要知道，你的博客.md文件都是直接存在source文件夹下的，你要新建博客，不要手动新建，使用hexo命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;博客.md&quot;    （引号也要有，在引号里面输入你的文章名称。）</span><br></pre></td></tr></table></figure></p><p>然后再从source/_posts/里面打开刚刚新创建的文章。<br><img src="http://bmob-cdn-24906.b0.upaiyun.com/2019/04/15/720209cf40973561808a29ed4ce60fb9.png" alt><br>最上面用—包围起来的是文章的一些基本信息<br><a href="https://hexo.io/zh-cn/docs/front-matter.html" style="text-decoration:none" target="_blank" rel="noopener">点击查看官方文档</a><br>不要忘了在”:”和”-“后面加空格。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure></p><p>在合适的位置添加more可以让你的文章在主页只显示more以上的内容，其他内容展开以后才能看。<br>除了markdown一定要学会以外，推荐把html也学一学，在.md文件里可以用html语言，它可以让你的文章更加好看。<br>如果要在博客上挂图片的话，不建议使用本地博客。<br><a href="https://www.bmob.cn/" target="_blank" rel="noopener">https://www.bmob.cn/</a><br>注册一个账号，创建云数据库。<br><img src="http://bmob-cdn-24906.b0.upaiyun.com/2019/04/15/73900cff407960af8048823f620e7f81.png" alt><br>上传到素材里面，然后打开图片复制图片链接到你的博客里就行了。</p><h2 id="感谢观看"><a href="#感谢观看" class="headerlink" title="感谢观看"></a>感谢观看</h2>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>扩展欧几里得算法</title>
      <link href="/posts/32ceef63/"/>
      <url>/posts/32ceef63/</url>
      
        <content type="html"><![CDATA[<p>例题：利用扩展欧几里得算法思想求得不定方程 a<em>x+b</em>y=gcd(a,b) 的一组解<br>它还可以用来求除法逆元。<br><a id="more"></a></p><h2 id="欧几里得算法"><a href="#欧几里得算法" class="headerlink" title="欧几里得算法"></a>欧几里得算法</h2><p>通俗地讲就是辗转相除法。<br>若有两个数a和b，求两个数的公因数。<br>可以枚举两个数的因子，复杂度为O(n)，数据大的时候就很慢了。<br>于是便有了欧几里得算法：gcd(a,b)=gcd(b,a mod b)<br>证明：a可以表示成a = kb + r，则r = a mod b<br>假设d是a,b的一个公约数，则有<br>d|a, d|b，而r = a - kb，因此d|r<br>因此d是(b,a mod b)的公约数<br>假设d 是(b,a mod b)的公约数，则<br>d | b , d |r ，但是a = kb +r<br>因此d也是(a,b)的公约数<br>因此(a,b)和(b,a mod b)的公约数是一样的，其最大公约数也必然相等。<br>复杂度为O(log min(a,b)).</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int gcd(int a, int b)</span><br><span class="line">&#123;</span><br><span class="line">    return b ? gcd(b, a % b) : a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扩展欧几里得算法"><a href="#扩展欧几里得算法" class="headerlink" title="扩展欧几里得算法"></a>扩展欧几里得算法</h2><p>利用欧几里得算法思想求得不定方程 a<em>x+b</em>y=gcd(a,b) 的一组解。<br>原理如下：<br>设a&gt;b<br>1）当b=0有 a<em>x=gcd(a,b)=a，即x=1，而y为任意数，为了统一我们令y=0；<br>2）接下来看一组方程：<br>方程一 ： ax1+by1=gcd(a,b)<br>方程二 ： bx2+(a%b)y2=gcd(b,a%b)      (方程二由欧几里得算法 gcd(a,b) =gcd(b,a%b) 得到）<br>两个等式右边相等，所以 ax1+by1 = bx2+(a%b)y2<br>又a%b=a-floor(a/b)</em>b     (这里floor的意思是向下取整，在c++代码中int类型可以不用floor）<br>得ax1+by1=bx2+[a-floor(a/b)<em>b]</em>y2<br>在这里把a，b当成未知数，根据多项式恒等定理由x1<em>a+y1</em>b=y2<em>a+[x2-floor(a/b)</em>y2]<em>b可得<br>x1=y2<br>y1=[x2-floor(a/b)</em>y2]<br>由最终解x=1,y=0不断向前推出目标解x1,y1<br>不难想到利用递归求解，根据上述过程得到以下代码</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int exgcd(int a, int b, int &amp;x, int &amp;y)</span><br><span class="line">&#123;</span><br><span class="line">    if (b == 0)</span><br><span class="line">    &#123;</span><br><span class="line">        x = 1;</span><br><span class="line">        y = 0;</span><br><span class="line">        return a;</span><br><span class="line">    &#125;</span><br><span class="line">    int gcd = exgcd(b, a % b, x, y);</span><br><span class="line">    int x2 = x, y2 = y;</span><br><span class="line">    x = y2;</span><br><span class="line">    y = x2 - (a / b) * y2;</span><br><span class="line">    return gcd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int x, y, a, b;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    cout &lt;&lt; &quot;ab最大公约数:&quot; &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; exgcd(a, b, x, y) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;x = &quot; &lt;&lt; x &lt;&lt; &quot;   y = &quot; &lt;&lt; y &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于除法逆元，请看其他博客。</p>]]></content>
      
      
      <categories>
          
          <category> 算法模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>米勒拉宾算法</title>
      <link href="/posts/985363e6/"/>
      <url>/posts/985363e6/</url>
      
        <content type="html"><![CDATA[<p>在判断一个数是否为质数，朴素算法的复杂度为O(sqrt(n))。但是对于超过int的数据可能会超时。<br>于是就有了传说中的随机算法，效率极高，可以对一个2^63的素数进行判断，可以分解比较大的数的因子。<br><a id="more"></a></p><blockquote><p>对于一个数n，如果想要判断它是否为素数，常规的方法为试除法。即，让n依次除以2到sqrt（n）以内的整数。如果有出现除尽的情况，则为合数。该方法的时间复杂度为O（sqrt（n））在面对n为长整型的时候有可能超出时间要求。因此普遍采用米勒拉宾算法进行素性判定。</p></blockquote><h3 id="费马小定理"><a href="#费马小定理" class="headerlink" title="费马小定理"></a>费马小定理</h3><p>引理1．<br>　　若a,b,c为任意3个整数,m为正整数，且(m,c)=1，则当a·c≡b·c(mod m)时，有a≡b(mod m)。<br>　　证明：a·c≡b·c(mod m)可得ac–bc≡0(mod m)可得(a-b)·c≡0(mod m)。因为(m,c)=1即m,c互质，c可以约去，a– b≡0(mod m)可得a≡b(mod m)。 [2]<br>引理2．<br>　　设m是一个整数且m&gt;1，b是一个整数且(m,b)=1。如果a[1],a[2],a[3],a[4],…a[m]是模m的一个完全剩余系，则b·a[1],b·a[2],b·a[3],b·a[4],…b·a[m]也构成模m的一个完全剩余系。</p><p>小费马定理说的是：若有素数p，则对任意的数a( a为正整数 ，且a &lt; p)，a^( p-1 ) ≡ 1( mod p )。反之，若有任意的a( a为正整数 ，且a &lt; p)使得p不满足  a^( p-1 ) ≡ 1( mod p )，p一定为合数。 可以发现若是能够举出所有的a，都能满足上式，是不是就说明p是素数呢？其实不是因为有一类合数也可以做到这一点，这一类合数叫做Carmichael数。前三个这样的数是561 ，1 105，1 729。这样的数真让人不爽。所以采用这种方法测出来的所谓素数是不一定的。叫做伪素数。哪怕你枚举出所有的a，也不可避免。</p><h3 id="基于费马小定理的米勒拉宾素数测试法"><a href="#基于费马小定理的米勒拉宾素数测试法" class="headerlink" title="基于费马小定理的米勒拉宾素数测试法"></a>基于费马小定理的米勒拉宾素数测试法</h3><p>可以大大的提高检测素数的正确性，但是同样并非一定正确，错误可能性却小到可以接受。</p><p>该方法同样利用了枚举多个a的做法，以提高算法的可靠性，对于每一个a，又采用了特殊的方法处理。这基于另外一个定理：如果p是素数，x是小于p的正整数，且x^2 mod p = 1，那么要么x=1，要么x=p-1。该定理证明如下：如果p为素数，x是小于p的正整数， 且x^2 mod p = 1 ，说明p能够整除（x+1）（x-1）。但是p是素数，那么只可能是x-1能被p整除(此时x=1)或x+1能被p整除(此时 x=p-1)。</p><p>判断一个数是不是素数光靠上面的方法是不可靠的，因为p如果是合数的话，也有可能有x^2 ≡ 1 mod(p)  且 x=1或者 x =p-1；但是多排除几次p不为合数的话，就增大了p是素数的可能性 ，这是这个算法的核心思想。因此例如341这个数。可知 ( 2^340 ) ≡ 1 (mod 340 );（2^170）≡ 1(mod 340)  ； 但是发现 2^85 mod 341=32。这足以证明341是一个合数，而不是一个素数。</p><p>首先判断要判断的数n是不是2，在判断n是不是奇数。然后尽可能的在令d=n-1，在d中除去2，使得n=d<em>(2^t),d为奇数，t的值并不关心。如果n是一个素数，那么或者a ^ d mod n=1，或者存在某个i使得a ^ (d</em>2 ^ i) mod n=n-1 ( 0&lt;=i &lt; r ) （注意i可以等于0，这就把a ^ d mod n = n-1的情况统一到后面去了）。</p><p>求a^d mod(n)的算法以及求d^2的算法是采用的快速幂取模算法。但是在d为long long的情况下有可能乘法溢出。有更加优秀的算法存在。</p><p>###代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const ll MAX = 1000;</span><br><span class="line">const ll MAXN = 1000;</span><br><span class="line">#define INF 0x3f3f3f3f</span><br><span class="line">#define forn(i, n) for (ll i = 0; i &lt; n; i++)</span><br><span class="line">#define form(i, n) for (ll i = 1; i &lt;= n; i++)</span><br><span class="line">#define mem(a, b) memset(a, b, sizeof(a))</span><br><span class="line">#define FIN freopen(&quot;in.txt&quot;, &quot;r&quot;, stdin);</span><br><span class="line">#define FOUT freopen(&quot;out.txt&quot;, &quot;w&quot;, stdout);</span><br><span class="line"></span><br><span class="line">//****************************************************************</span><br><span class="line">// Miller_Rabin 算法进行素数测试</span><br><span class="line">//速度快，而且可以判断 &lt;2^63的数</span><br><span class="line">//****************************************************************</span><br><span class="line">const int S = 20; //随机算法判定次数，S越大，判错概率越小</span><br><span class="line"></span><br><span class="line">//计算 (a*b)%c.   a,b都是long long的数，直接相乘可能溢出的</span><br><span class="line">//  a,b,c &lt;2^63</span><br><span class="line">long long mult_mod(long long a, long long b, long long c)</span><br><span class="line">&#123;</span><br><span class="line">    a %= c;</span><br><span class="line">    b %= c;</span><br><span class="line">    long long ret = 0;</span><br><span class="line">    while (b)</span><br><span class="line">    &#123;</span><br><span class="line">        if (b &amp; 1)</span><br><span class="line">        &#123;</span><br><span class="line">            ret += a;</span><br><span class="line">            ret %= c;</span><br><span class="line">        &#125;</span><br><span class="line">        a &lt;&lt;= 1;</span><br><span class="line">        if (a &gt;= c)</span><br><span class="line">            a %= c;</span><br><span class="line">        b &gt;&gt;= 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//计算  x^n %c</span><br><span class="line">long long pow_mod(long long x, long long n, long long mod) //x^n%c</span><br><span class="line">&#123;</span><br><span class="line">    if (n == 1)</span><br><span class="line">        return x % mod;</span><br><span class="line">    x %= mod;</span><br><span class="line">    long long tmp = x;</span><br><span class="line">    long long ret = 1;</span><br><span class="line">    while (n)</span><br><span class="line">    &#123;</span><br><span class="line">        if (n &amp; 1)</span><br><span class="line">            ret = mult_mod(ret, tmp, mod);</span><br><span class="line">        tmp = mult_mod(tmp, tmp, mod);</span><br><span class="line">        n &gt;&gt;= 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//以a为基,n-1=x*2^t      a^(n-1)=1(mod n)  验证n是不是合数</span><br><span class="line">//一定是合数返回true,不一定返回false</span><br><span class="line">bool check(long long a, long long n, long long x, long long t)</span><br><span class="line">&#123;</span><br><span class="line">    long long ret = pow_mod(a, x, n);</span><br><span class="line">    long long last = ret;</span><br><span class="line">    for (int i = 1; i &lt;= t; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ret = mult_mod(ret, ret, n);</span><br><span class="line">        if (ret == 1 &amp;&amp; last != 1 &amp;&amp; last != n - 1)</span><br><span class="line">            return true; //合数</span><br><span class="line">        last = ret;</span><br><span class="line">    &#125;</span><br><span class="line">    if (ret != 1)</span><br><span class="line">        return true;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Miller_Rabin()算法素数判定</span><br><span class="line">//是素数返回true.(可能是伪素数，但概率极小)</span><br><span class="line">//合数返回false;</span><br><span class="line"></span><br><span class="line">bool Miller_Rabin(long long n)</span><br><span class="line">&#123;</span><br><span class="line">    if (n &lt; 2)</span><br><span class="line">        return false;</span><br><span class="line">    if (n == 2)</span><br><span class="line">        return true;</span><br><span class="line">    if ((n &amp; 1) == 0)</span><br><span class="line">        return false; //偶数</span><br><span class="line">    long long x = n - 1;</span><br><span class="line">    long long t = 0;</span><br><span class="line">    while ((x &amp; 1) == 0)</span><br><span class="line">    &#123;</span><br><span class="line">        x &gt;&gt;= 1;</span><br><span class="line">        t++;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = 0; i &lt; S; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        long long a = rand() % (n - 1) + 1; //rand()需要stdlib.h头文件</span><br><span class="line">        if (check(a, n, x, t))</span><br><span class="line">            return false; //合数</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//************************************************</span><br><span class="line">//pollard_rho 算法进行质因数分解</span><br><span class="line">//************************************************</span><br><span class="line">long long factor[100]; //质因数分解结果（刚返回时是无序的）</span><br><span class="line">int tol;               //质因数的个数。数组小标从0开始</span><br><span class="line"></span><br><span class="line">long long gcd(long long a, long long b)</span><br><span class="line">&#123;</span><br><span class="line">    if (a == 0)</span><br><span class="line">        return 1; //???????</span><br><span class="line">    if (a &lt; 0)</span><br><span class="line">        return gcd(-a, b);</span><br><span class="line">    while (b)</span><br><span class="line">    &#123;</span><br><span class="line">        long long t = a % b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = t;</span><br><span class="line">    &#125;</span><br><span class="line">    return a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">long long Pollard_rho(long long x, long long c)</span><br><span class="line">&#123;</span><br><span class="line">    long long i = 1, k = 2;</span><br><span class="line">    long long x0 = rand() % x;</span><br><span class="line">    long long y = x0;</span><br><span class="line">    while (1)</span><br><span class="line">    &#123;</span><br><span class="line">        i++;</span><br><span class="line">        x0 = (mult_mod(x0, x0, x) + c) % x;</span><br><span class="line">        long long d = gcd(y - x0, x);</span><br><span class="line">        if (d != 1 &amp;&amp; d != x)</span><br><span class="line">            return d;</span><br><span class="line">        if (y == x0)</span><br><span class="line">            return x;</span><br><span class="line">        if (i == k)</span><br><span class="line">        &#123;</span><br><span class="line">            y = x0;</span><br><span class="line">            k += k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//对n进行素因子分解</span><br><span class="line">void findfac(long long n)</span><br><span class="line">&#123;</span><br><span class="line">    if (Miller_Rabin(n)) //素数</span><br><span class="line">    &#123;</span><br><span class="line">        factor[tol++] = n;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    long long p = n;</span><br><span class="line">    while (p &gt;= n)</span><br><span class="line">        p = Pollard_rho(p, rand() % (n - 1) + 1);</span><br><span class="line">    findfac(p);</span><br><span class="line">    findfac(n / p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    //srand(time(NULL));//需要time.h头文件//POJ上G++不能加这句话</span><br><span class="line">    long long n;</span><br><span class="line">    while (cin &gt;&gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        tol = 0;</span><br><span class="line">        findfac(n);</span><br><span class="line">        for (int i = 0; i &lt; tol; i++)</span><br><span class="line">            cout &lt;&lt; factor[i] &lt;&lt; &quot; &quot;;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">        if (Miller_Rabin(n))</span><br><span class="line">            cout &lt;&lt; &quot;Yes&quot; &lt;&lt; endl;</span><br><span class="line">        else</span><br><span class="line">            cout &lt;&lt; &quot;No&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 板子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矩阵快速幂</title>
      <link href="/posts/7f45ba65/"/>
      <url>/posts/7f45ba65/</url>
      
        <content type="html"><![CDATA[<p>关于快速幂以及矩阵快速幂的基础知识介绍。<br>矩阵快速幂可以用来解决部分常系数非齐次递推通向公式(也可以用线代的知识推公式，大概率会自闭)。<br><img src="http://bmob-cdn-24906.b0.upaiyun.com/2019/04/14/06574ee34041275e80ac093b5622aceb.jpg" alt><br><a id="more"></a></p><h2 id="一、快速幂部分"><a href="#一、快速幂部分" class="headerlink" title="一、快速幂部分"></a>一、快速幂部分</h2><p>求a^b，代码如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int Quickpow(int x, int y)</span><br><span class="line">&#123;</span><br><span class="line">    int ans = 1;</span><br><span class="line">    while (y)</span><br><span class="line">    &#123;</span><br><span class="line">        if (y &amp; 1)</span><br><span class="line">            ans *= x;</span><br><span class="line">        x *= x;</span><br><span class="line">        y &gt;&gt;= 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a, b;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    cout &lt;&lt; Quickpow(a, b) &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中 “&gt;&gt;”位移运算,就是把y转换为二进制数，整体向右移一位，高位补零，最低位消失，通常右移一位就等价于y除以2再赋给b。 “&amp;”可判断y的二进制数最后一位是否为1，等价于判断奇偶。</p><p>这里举例说明绿色部分代码。</p><p>eg：求a^11</p><p>11的二进制数是1011=2^0+2^1+2^3;</p><p>其中要理解x<em>=x这一步，x</em>x==x^2,下一步再乘，就是x^2<em>x^2==x^4,然后同理  x^4 </em> x^4 = x^8 …在循环中x–&gt;x^2–&gt;x^4–&gt;x^8–&gt;x^16–&gt;x^32…….指数正是 2^i 啊，再看上面的例子，a^11=  a^(2^0) <em> a^(2^1) </em> a^(2^3)，这三项就完美解决了。</p><h2 id="二、矩阵-amp-快速幂部分"><a href="#二、矩阵-amp-快速幂部分" class="headerlink" title="二、矩阵&amp;快速幂部分"></a>二、矩阵&amp;快速幂部分</h2><p>继续上代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">struct Matrix //结构体，矩阵 </span><br><span class="line">&#123;</span><br><span class="line">    int m[maxn][maxn];</span><br><span class="line">&#125;;</span><br><span class="line">Matrix Mul(Matrix a, Matrix b, int N) //两个N阶矩阵的乘积 </span><br><span class="line">&#123;</span><br><span class="line">    Matrix ans;</span><br><span class="line">    for (int i = 0; i &lt; N; i++)</span><br><span class="line">        for (int j = 0; j &lt; N; j++)</span><br><span class="line">            ans.m[i][j] = 0;</span><br><span class="line">    for (int i = 0; i &lt; N; i++)</span><br><span class="line">        for (int j = 0; j &lt; N; j++)</span><br><span class="line">            for (int k = 0; k &lt; N; k++)</span><br><span class="line">                ans.m[i][j] += a.m[i][k] * b.m[k][j];</span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br><span class="line">Matrix Quickpow(Matrix k, int N, int n) //N阶矩阵的n次幂 </span><br><span class="line">&#123;</span><br><span class="line">    Matrix ans; //声明一个单位矩阵</span><br><span class="line">    for (int i = 0; i &lt; N; i++)</span><br><span class="line">        for (int j = 0; j &lt; n; j++)</span><br><span class="line">            if (i == j)</span><br><span class="line">                ans.m[i][j] = 1;</span><br><span class="line">            else</span><br><span class="line">                ans.m[i][j] = 0;</span><br><span class="line">    while (n)</span><br><span class="line">    &#123;</span><br><span class="line">        if (n &amp; 1)</span><br><span class="line">            k = Mul(k, ans, N);</span><br><span class="line">        k = Mul(k, k, N);</span><br><span class="line">        n &gt;&gt;= 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>POJ 3070 题目，求斐波那契数列。<br>直接递推的局限性：<br>（1）本题让你递推的斐波那契数n高达10亿。测试时间仅1秒的时间，for循环用递推公式递归导致超时。<br>（2）通过打表实现随机访问根本不可能，先把斐波那契数列求到10亿，然后想去进行随机访问。题目未给出那么多内存，数组也开不到10亿。<br>因此它可以用矩阵快速幂来写。<br>观察f[n] = f[n-1]+f[n-2] 第n相是由第n-1项和第n-2项递推而来。<br>同理，第n+1项由第n项和第n-1项递推而来。<br>因此可以用矩阵表示：<br><img src="https://img-blog.csdn.net/20180428195454154" alt="avatar"></p><p>后续会再补充矩阵快速幂的题目。</p>]]></content>
      
      
      <categories>
          
          <category> 算法模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 板子 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
